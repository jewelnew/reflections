How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    for the most time, when we change something in our code it will introduce
    some bugs in some degree.Bugs are appears in places where the changes most take place.
    manepulate the code lead to diff between the old version and the new version.
    if we can find the diff text easily the more likely that we can detect the bugs.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    if you can access to the entire history of a file,you picture the evolution of this
    file from the begining originally to the moment 'Now', the details of every version
    is cleared, you know all about the process what you have done about the file.you can
    easily date back to the certain version of the file once your current file are not work
    so good.In general,it improve the efficience of the workflow.
    You can save time for retrieving older version of your code when you notice you have a bug in the newer version.


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: 
    * get the history more explicit.
    Cons: 
    * data loss happens when you are interupped by something and forget toy save manually.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    * Git is more programming oriented, where several files tend to consist one logical group. 
    On the other hand, Google Docs is primarily more targeted for documents created for human readings, 
    in which case each single file consists a meaningful piece.


How can you use the commands git log and git diff to view the history of files?

    * git log can be used to list the summaries of all the changes made to the repository.
	* git diff can be used to see what has actually changed between two given commits.

How might using version control make you more confident to make changes that
could break something?

    * You can try changing any critical features, since you can always revert back to the point when those were working correctly. 
    [If you find something is not working, you can git log, and try the previous versions untill you find the one which works, 
    and make diff of the last one that worked correctly and the commit following it. That result would show where and how the bug was introduced.]
    verstion control makes me more of a risk taker in the sense that I am able to explore pretty significant changes  in the code base,architecture differences at very low level without fear of breaking the entire project. Without version control,the way i looked at my code was as soon as it was working,i would make very small iterative changes.



Now that you have your workspace set up, what do you want to try using Git for?

	* Writing my own programs.
